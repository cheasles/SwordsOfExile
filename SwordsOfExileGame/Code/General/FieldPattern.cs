using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
////using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace SwordsOfExileGame
{
    public class Pattern
    {
        readonly byte[,] p;

        public int this[int x, int y] { get { return (int)p[x, y]; } }

        public Pattern(params int[] q)
        {
            p = new byte[9, 9];
            int a = 0;
            for (int y = 0; y < 9; y++)
                for (int x = 0; x < 9; x++)
                    p[x, y] = (byte)q[a++];
        }

        public IEnumerable<Location> EachPatternSpot(Location centre_pos)
        {
            for (int y = 0; y < 9; y++)
                for (int x = 0; x < 9; x++)
                    if (p[x, y] != 0) yield return centre_pos.Mod(x - 4, y - 4);
        }

        public static Pattern FromIndex(int i)
        {
            switch (i)
            {
                case 0: return Single;
                case 1: return Plus;
                case 2: return SmallSquare;
                case 3: return Square;
                case 4: return Radius2;
                case 5: return Radius3;
                default:
                    return Field[i - 6];
            }
        }

        public static Pattern Single = new Pattern(0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0);
        public static Pattern Plus = new Pattern(0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0);
        public static Pattern SmallSquare = new Pattern(0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0);
        public static Pattern Square = new Pattern(0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0);
        public static Pattern Radius2 = new Pattern(
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0);
        public static Pattern Radius3 = new Pattern(0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 0, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0);
        public static Pattern[] Field = {new Pattern(0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0),
	new Pattern(0,0,0,0,0,0,0,0,1,
			0,0,0,0,0,0,0,1,1,
			0,0,0,0,0,0,1,1,0,
			0,0,0,0,0,1,1,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,1,1,0,0,0,0,0,
			0,1,1,0,0,0,0,0,0,
			1,1,0,0,0,0,0,0,0),
	new Pattern(0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0),
	new Pattern(1,0,0,0,0,0,0,0,0,
			1,1,0,0,0,0,0,0,0,
			0,1,1,0,0,0,0,0,0,
			0,0,1,1,0,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,0,1,1,0,0,
			0,0,0,0,0,0,1,1,0,
			0,0,0,0,0,0,0,1,1),
	new Pattern(0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0),
	new Pattern(0,0,0,0,0,0,0,1,1,
			0,0,0,0,0,0,1,1,0,
			0,0,0,0,0,1,1,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,1,1,0,0,0,0,0,
			0,1,1,0,0,0,0,0,0,
			1,1,0,0,0,0,0,0,0,
			1,0,0,0,0,0,0,0,0),
	new Pattern(0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0),
	new Pattern(1,1,0,0,0,0,0,0,0,
			0,1,1,0,0,0,0,0,0,
			0,0,1,1,0,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,0,1,1,0,0,
			0,0,0,0,0,0,1,1,0,
			0,0,0,0,0,0,0,1,1,
			0,0,0,0,0,0,0,0,1)};
    }
}